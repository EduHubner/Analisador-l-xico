from token import Token

class Lexico:
    def __init__(self):
        self.afd = {
            "INICIAL": {
                " ": "ESPACO",
                "(": "ABRE_PARENTESES",
                ")": "FECHA_PARENTESES",
                "{": "ABRE_CHAVE",
                "}": "FECHA_CHAVE",
                ">": "MAIOR",
                "<": "MENOR",
                "=": "IGUAL",
                "!": "DIFERENTE(!)",
                "+": "SOMA",
                "-": "SUBTRACAO",
                "*": "MULTIPLICACAO",
                "/": "DIVISAO",
                "0": "CONSTANTE",
                "1": "CONSTANTE",
                "2": "CONSTANTE",
                "3": "CONSTANTE",
                "4": "CONSTANTE",
                "5": "CONSTANTE",
                "6": "CONSTANTE",
                "7": "CONSTANTE",
                "8": "CONSTANTE",
                "9": "CONSTANTE",
                "a": "ID",
                "b": "BOOLEAN(B)", # começando o tratamento de BOOLEAN
                "c": "CHAR(C)", # começando o tratamento de CHAR
                "d": "ID",  
                "e": "ELSE(E)", # começando o tratamento de ELSE
                "f": "F", # começando o tratamento de FLOAT, FOR e FUN(function)
                "g": "ID",
                "h": "ID",
                "i": "I", # começando o tratamento de IF, IN e INT
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "OUT(O)", # começando o tratamento de OUT
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "STRING(S)", # começando o tratamento de STRING
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "WHILE(W)", # começando o tratamento de WHILE
                "x": "ID",
                "y": "ID",
                "z": "ID",
                ".": "CONCATENAR",
                ",": "VIRGULA",
                ";": "PONTO_VIRGULA",
                ":": "DOIS_PONTOS",
                '"': "ASPAS"
            },
            # Tratamento de IF, IN e INT
            "I": { # tratamento de IF, IN e INT, informado apenas o primeiro caractere 'I'(Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "IF", # se o próximo caractere for 'f', vai para o estado final de IF
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "INT_IN(N)", # se o próximo caractere for 'n', vai para o estado de INT/IN
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "IF": { # estado final de IF, informado o segundo caractere 'F' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            # Tratamento de ELSE
            "ELSE(E)": {
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ELSE(L)", # se o próximo caractere for 'l', continua
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            "ELSE(L)": {
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ELSE(S)", # se o próximo caractere for 's', continua
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            "ELSE(S)": {
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ELSE", # se o próximo caractere for 'e', vai para o estado final de ELSE
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            "ELSE": { # estado final de ELSE (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            # Tratamento de INT e IN
            "INT_IN(N)": { # segundo caractere 'N' - pode ser INT ou IN
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "INT", # se o próximo caractere for 't', vai para o estado final de INT
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "INT": { # estado final de INT (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            
            # Tratamento de FLOAT e FOR
            "F": { # primeiro caractere 'F' - pode ser FLOAT ou FOR
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "FLOAT(L)", # se o próximo caractere for 'l', continua para FLOAT
                "m": "ID",
                "n": "ID",
                "o": "FOR(O)", # se o próximo caractere for 'o', continua para FOR
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "FUN(U)", #se o próximo caractere for 'n', continua para FUN (funciotion)
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FLOAT(L)": { # segundo caractere 'L' para FLOAT
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "FLOAT(O)", # se o próximo caractere for 'o', continua
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FLOAT(O)": { # terceiro caractere 'O' para FLOAT
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "FLOAT(A)", # se o próximo caractere for 'a', continua
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FLOAT(A)": { # quarto caractere 'A' para FLOAT
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "FLOAT", # se o próximo caractere for 't', vai para o estado final de FLOAT
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FLOAT": { # estado final de FLOAT (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            
            # Tratamento de STRING
            "STRING(S)": { # primeiro caractere 'S'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "STRING(T)", # se o próximo caractere for 't', continua
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "STRING(T)": { # segundo caractere 'T'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "STRING(R)", # se o próximo caractere for 'r', continua
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "STRING(R)": { # terceiro caractere 'R'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "STRING(I)", # se o próximo caractere for 'i', continua
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "STRING(I)": { # quarto caractere 'I'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "STRING(N)", # se o próximo caractere for 'n', continua
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "STRING(N)": { # quinto caractere 'N'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "STRING", # se o próximo caractere for 'g', vai para o estado final
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "STRING": { # estado final de STRING (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            
            # Tratamento de BOOLEAN
            "BOOLEAN(B)": { # primeiro caractere 'B'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "BOOLEAN(O)", # se o próximo caractere for 'o', continua
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "BOOLEAN(O)": { # segundo caractere 'O'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "BOOLEAN(L)", # se o próximo caractere for 'l', continua
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "BOOLEAN(L)": { # terceiro caractere 'L'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "BOOLEAN(E)", # se o próximo caractere for 'e', continua
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "BOOLEAN(E)": { # quarto caractere 'E'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "BOOLEAN(A)", # se o próximo caractere for 'a', continua
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "BOOLEAN(A)": { # quinto caractere 'A'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "BOOLEAN", # se o próximo caractere for 'n', vai para o estado final
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "BOOLEAN": { # estado final de BOOLEAN (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            
            # Tratamento de CHAR
            "CHAR(C)": { # primeiro caractere 'C'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "CHAR(H)", # se o próximo caractere for 'h', continua
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "CHAR(H)": { # segundo caractere 'H'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "CHAR(A)", # se o próximo caractere for 'a', continua
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "CHAR(A)": { # terceiro caractere 'A'
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "CHAR", # se o próximo caractere for 'r', vai para o estado final
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "CHAR": { # estado final de CHAR (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },

            # Tratamento de CONSTANTE (Estado Final)
            "CONSTANTE": {
                "0": "CONSTANTE",
                "1": "CONSTANTE",
                "2": "CONSTANTE",
                "3": "CONSTANTE",
                "4": "CONSTANTE",
                "5": "CONSTANTE",
                "6": "CONSTANTE",
                "7": "CONSTANTE",
                "8": "CONSTANTE",
                "9": "CONSTANTE",
                ".": "PONTO_DECIMAL"  # Tratamento de ponto decimal
            },
            "PONTO_DECIMAL": {
                "0": "CONSTANTE",
                "1": "CONSTANTE",
                "2": "CONSTANTE",
                "3": "CONSTANTE",
                "4": "CONSTANTE",
                "5": "CONSTANTE",
                "6": "CONSTANTE",
                "7": "CONSTANTE",
                "8": "CONSTANTE",
                "9": "CONSTANTE"
            },
            # Tratamento de ID (Estado Final)
            "ID": {
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID",
                ".": "PONTO_ACESSO"
            },
            # Tratamento de PONTO_ACESSO (Usar metodos de uma classe, ex: pessoa.getNome()) Estado final
            # Nesse caso o ponto acesso irá guardar um token que será um ID com um . no final (Ex: pessoa.), faço isso para não dar conflico 
            # com o . do CONCATENAR
            "PONTO_ACESSO": {},
            # Pontuações
            "VIRGULA": {},
            "PONTO_VIRGULA": {},
            "DOIS_PONTOS": {},
            "ASPAS": {},
            # Concatenar
            "CONCATENAR": {},
            # Espaços
            "ESPACO": {},
            # Parenteses
            "ABRE_PARENTESES": {},
            "FECHA_PARENTESES": {},
            # Operadores
            "SOMA": { # Estado final SOMA
                "+": "INCREMENTO"
            },
            "INCREMENTO": {}, # Estado final de incremento (++)
            "SUBTRACAO": {
                "-": "DECREMENTO"
            },
            "DECREMENTO": {},  # Estado final de decremento (--)
            "MULTIPLICACAO": {},
            "DIVISAO": {},
            "IGUAL": {"=": "IGUAL_IGUAL"},  # '=' seguido de '=
            # Comparadores
            "DIFERENTE(!)": {"=": "DIFERENTE"},  # '!' seguido de '='
            "DIFERENTE": {},
            "MAIOR": {"=": "MAIOR_IGUAL"},  # '>' seguido de '='
            "MENOR": {"=": "MENOR_IGUAL"},  # '<' seguido de '='
            "IGUAL_IGUAL": {},
            "MENOR_IGUAL": {},
            "MAIOR_IGUAL": {},
            # Chaves
            "ABRE_CHAVE": {},
            "FECHA_CHAVE": {},
            
            # Tratamento de FOR
            "FOR(O)": { # tratamento de FOR, informado apenas o segundo caractere 'O' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "FOR", # se o próximo caractere for 'r', vai para o estado final de FOR
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FOR": { # estado final de FOR, informado o terceiro caractere 'R' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            # Tratamento de WHILE
            "WHILE(W)": { # começando o tratamento de WHILE, informado apenas o primeiro caractere 'W' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "WHILE(H)", # se o próximo caractere for 'h', vai para o próximo estado
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "WHILE(H)": { # começando o tratamento de WHILE, informado 'H' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "WHILE(I)", # se o próximo caractere for 'i', vai para o próximo estado
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "WHILE(I)": { # começando o tratamento de WHILE, informado 'I' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "WHILE(L)", # se o próximo caractere for 'l', vai para o próximo estado
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "WHILE(L)": { # começando o tratamento de WHILE, informado 'L' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "WHILE", # se o próximo caractere for 'e', vai para o próximo estado
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "WHILE": { # começando o tratamento de WHILE, finalizado (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            
            # Tratamento de IN (já está sendo tratado em INT_IN)
            "IN": { # estado final de IN (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            # Tratamento de OUT
            "OUT(O)": { # começando o tratamento de OUT, informado 'O' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "OUT(U)", # se o próximo caractere for 'u', vai para o próximo estado
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "OUT(U)": { # começando o tratamento de OUT, informado 'U' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "OUT",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "OUT": { # estado final de OUT, informado 'T' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FUN(U)": { # começando o tratamento de FUN, informado 'U' (Estado Final)
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "FUN", # se o próximo caractere for 'n', vai para o próximo estado
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            },
            "FUN": { # estado final de FUN
                "0": "ID",
                "1": "ID",
                "2": "ID",
                "3": "ID",
                "4": "ID",
                "5": "ID",
                "6": "ID",
                "7": "ID",
                "8": "ID",
                "9": "ID",
                "a": "ID",
                "b": "ID",
                "c": "ID",
                "d": "ID",
                "e": "ID",
                "f": "ID",
                "g": "ID",
                "h": "ID",
                "i": "ID",
                "j": "ID",
                "k": "ID",
                "l": "ID",
                "m": "ID",
                "n": "ID",
                "o": "ID",
                "p": "ID",
                "q": "ID",
                "r": "ID",
                "s": "ID",
                "t": "ID",
                "u": "ID",
                "v": "ID",
                "w": "ID",
                "x": "ID",
                "y": "ID",
                "z": "ID"
            }
        }

        # Dicionário de estados finais

        self.finais = {
            # Palavras reservadas
            "INT": "INT",
            "FLOAT": "FLOAT", 
            "STRING": "STRING",
            "BOOLEAN": "BOOLEAN",
            "CHAR": "CHAR",
            "IF": "IF",
            "FOR": "FOR",
            "WHILE": "WHILE",
            "OUT": "OUT",
            # Literais e identificadores
            "CONSTANTE": "CONSTANTE",
            "ID": "ID",
            # Símbolos
            "ESPACO": "ESPACO",
            "ABRE_PARENTESES": "ABRE_PARENTESES",
            "FECHA_PARENTESES": "FECHA_PARENTESES",
            "ABRE_CHAVE": "ABRE_CHAVE",
            "FECHA_CHAVE": "FECHA_CHAVE",
            "VIRGULA": "VIRGULA",
            "PONTO_VIRGULA": "PONTO_VIRGULA",
            "DOIS_PONTOS": "DOIS_PONTOS",
            "CONCATENAR": "CONCATENAR",
            "PONTO_ACESSO": "PONTO_ACESSO",
            # Operadores
            "MAIOR": "MAIOR",
            "MENOR": "MENOR",
            "DIFERENTE": "DIFERENTE",
            "MAIOR_IGUAL": "MAIOR_IGUAL",
            "MENOR_IGUAL": "MENOR_IGUAL",
            "IGUAL_IGUAL": "IGUAL_IGUAL",
            "IGUAL": "IGUAL",
            "SOMA": "SOMA",
            "SUBTRACAO": "SUBTRACAO",
            "MULTIPLICACAO": "MULTIPLICACAO",
            "DIVISAO": "DIVISAO",
            "INCREMENTO": "INCREMENTO",
            "DECREMENTO": "DECREMENTO",
            # Função
            "FUN": "FUN",
            # Estados intermediários que também são finais
            # Estados de prefixo de palavras reservadas
            "I": "ID",
            "F": "ID",
            "BOOLEAN(B)": "ID", 
            "CHAR(C)": "ID",
            "STRING(S)": "ID",
            "OUT(O)": "ID",
            "WHILE(W)": "ID",
            "INT_IN(N)": "IN",  # Se parar em 'in', é a palavra IN
            "STRING(T)": "ID",
            "STRING(R)": "ID",
            "STRING(I)": "ID",
            "STRING(N)": "ID",
            "BOOLEAN(O)": "ID",
            "BOOLEAN(L)": "ID",
            "BOOLEAN(E)": "ID", 
            "BOOLEAN(A)": "ID",
            "CHAR(H)": "ID",
            "CHAR(A)": "ID",
            "FLOAT(L)": "ID",
            "FLOAT(O)": "ID",
            "FLOAT(A)": "ID",
            "FOR(O)": "ID",
            "WHILE(H)": "ID",
            "WHILE(I)": "ID",
            "WHILE(L)": "ID",
            "OUT(U)": "ID",
            "FUN(U)": "ID"
        }

    def analisar(self, entrada):
        estado = "INICIAL"
        i = 0
        pos = 0
        lexema = ""
        self.lista_tokens = []
        self.erros = []
        while i < len(entrada):
            if entrada[i] in self.afd[estado]:
                estado = self.afd[estado][entrada[i]]
                lexema += entrada[i]
                pos += 1
                i += 1
            elif estado in self.finais:
                if self.finais[estado] != "ESPACO":
                    self.lista_tokens.append(Token(self.finais[estado], lexema, pos - len(lexema)))
                estado = "INICIAL"
                lexema = ""
            else:
                self.erros.append(f"Erro: token inválido: '{lexema}{entrada[i]}' na posição {pos}")
                estado = "INICIAL"
                lexema = ""
                i += 1
                pos += 1
        if lexema and estado in self.finais:
            if self.finais[estado] != "ESPACO":
                self.lista_tokens.append(Token(self.finais[estado], lexema, pos - len(lexema)))

    def imprimir_resultados(self):
        print("TOKENS RECONHECIDOS:")
        print("=" * 50)
        for tk in self.lista_tokens:
            print(tk)
        if self.erros:
            print("\nERROS ENCONTRADOS:")
            print("=" * 50)
            for erro in self.erros:
                print(erro)

# Exemplo de uso
if __name__ == "__main__":
    entrada = "int num = 10; float valor = 3.14; string nome; boolean ativo = true; char letra = a; for (i=1;i<10;i++) { out(i); } "
    lexico = Lexico()
    lexico.analisar(entrada)
    lexico.imprimir_resultados()